import { BadRequestException, Injectable } from '@nestjs/common';
import { ApplicationsRepository, ApplicationStatus } from './repositories/applications.repository';
import { NotificationsGateway } from '../notifications/notifications.getway';
import { JobsService } from '../jobs/jobs.service';
import { Types } from 'mongoose';
import { ApplicationDocument } from './schemas/application.schema';

@Injectable()
export class ApplicationsService {
  constructor(
    private readonly repo: ApplicationsRepository,
    private readonly notificationsGateway: NotificationsGateway,
    private readonly jobsService: JobsService,
  ) {}

  async createFromAccount(accountId: string, jobId: string, coverLetter?: string): Promise<ApplicationDocument> {
    if (!jobId || !Types.ObjectId.isValid(jobId)) {
      throw new BadRequestException('jobId kh√¥ng h·ª£p l·ªá');
    }
    if (!accountId || !Types.ObjectId.isValid(accountId)) {
      throw new BadRequestException('accountId kh√¥ng h·ª£p l·ªá');
    }
    
    // T·∫°o application
    const application = await this.repo.create(accountId, jobId, coverLetter);
    
    // G·ª≠i th√¥ng b√°o ƒë·∫øn recruiter
    try {
      console.log('üîî B·∫Øt ƒë·∫ßu g·ª≠i th√¥ng b√°o cho recruiter...');
      console.log('üîç JobId ƒë·ªÉ t√¨m:', jobId);
      
      // L·∫•y th√¥ng tin job ƒë·ªÉ l·∫•y recruiterId
      const job = await this.jobsService.detail(jobId);
      console.log('üìã Job details full:', JSON.stringify(job, null, 2));
      
      if (!job) {
        console.log('‚ùå Job not found with id:', jobId);
        // V·∫´n t·∫°o notification v·ªõi th√¥ng tin c∆° b·∫£n
        await this.notificationsGateway.sendNotificationToUser(
          'unknown', // Fallback recruiterId
          {
            message: `C√≥ ·ª©ng vi√™n m·ªõi ·ª©ng tuy·ªÉn cho c√¥ng vi·ªác (Job ID: ${jobId})`,
            type: 'application_submitted'
          }
        );
        console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o fallback');
        return application;
      }
      
      console.log('‚úÖ Job found:', job.title);
      
      // L·∫•y recruiterId t·ª´ job
      let recruiterId: string | null = null;
      if (job.recruiterId) {
        // N·∫øu recruiterId l√† object (ƒë√£ populate), l·∫•y _id
        if (typeof job.recruiterId === 'object' && job.recruiterId._id) {
          recruiterId = job.recruiterId._id.toString();
        } else {
          // N·∫øu recruiterId l√† string ho·∫∑c ObjectId
          recruiterId = job.recruiterId.toString();
        }
      }
      
      console.log('üë§ RecruiterId extracted:', recruiterId);
      
      if (recruiterId && recruiterId !== 'unknown') {
        console.log('‚úÖ Sending notification to recruiter:', recruiterId);
        
        // L·∫•y th√¥ng tin ·ª©ng vi√™n t·ª´ accountId
        // TODO: C·∫ßn l·∫•y th√¥ng tin ·ª©ng vi√™n t·ª´ Account service
        const applicantName = '·ª®ng vi√™n'; // T·∫°m th·ªùi
        
        // S·ª≠ d·ª•ng method m·ªõi ƒë·ªÉ g·ª≠i notification
        await this.notificationsGateway.sendApplicationNotification(
          recruiterId,
          (application._id as Types.ObjectId).toString(),
          jobId,
          accountId,
          job.title,
          applicantName
        );
        
        console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o th√†nh c√¥ng');
      } else {
        console.log('‚ö†Ô∏è RecruiterId not found, sending fallback notification');
        
        // G·ª≠i th√¥ng b√°o fallback
        await this.notificationsGateway.sendNotificationToUser(
          'unknown',
          {
            message: `C√≥ ·ª©ng vi√™n m·ªõi ·ª©ng tuy·ªÉn cho c√¥ng vi·ªác "${job.title || 'Unknown Job'}"`,
            type: 'application_submitted'
          }
        );
        
        console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o fallback');
      }
      
    } catch (error) {
      console.error('‚ùå Error sending notification:', error);
      console.error('‚ùå Error details:', error.message);
      console.error('‚ùå Error stack:', error.stack);
      
      // V·∫´n c·ªë g·∫Øng g·ª≠i th√¥ng b√°o fallback
      try {
        await this.notificationsGateway.sendNotificationToUser(
          'unknown',
          {
            message: `C√≥ ·ª©ng vi√™n m·ªõi ·ª©ng tuy·ªÉn cho c√¥ng vi·ªác (Job ID: ${jobId})`,
            type: 'application_submitted'
          }
        );
        console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o fallback sau l·ªói');
      } catch (fallbackError) {
        console.error('‚ùå Error sending fallback notification:', fallbackError);
      }
    }
    
    return application;
  }

  async checkApplication(accountId: string, jobId: string) {
    if (!jobId || !Types.ObjectId.isValid(jobId)) {
      throw new BadRequestException('jobId kh√¥ng h·ª£p l·ªá');
    }
    if (!accountId || !Types.ObjectId.isValid(accountId)) {
      throw new BadRequestException('accountId kh√¥ng h·ª£p l·ªá');
    }
    return this.repo.checkApplication(accountId, jobId);
  }

  findById(id: string) {
    return this.repo.findById(id);
  }

  findAllByUser(userId: string, page?: number, limit?: number) {
    if (!userId || !Types.ObjectId.isValid(userId)) {
      throw new BadRequestException('userId kh√¥ng h·ª£p l·ªá');
    }
    return this.repo.findAllByUser(userId, page, limit);
  }

  findAllByJob(jobId: string, page?: number, limit?: number) {
    if (!jobId || !Types.ObjectId.isValid(jobId)) {
      throw new BadRequestException('jobId kh√¥ng h·ª£p l·ªá');
    }
    return this.repo.findAllByJob(jobId, page, limit);
  }

  updateStatus(id: string, status: ApplicationStatus, note?: string) {
    return this.repo.updateStatus(id, status, note);
  }

  withdrawByUser(accountId: string, id: string) {
    return this.repo.withdrawByUser(accountId, id);
  }
}


