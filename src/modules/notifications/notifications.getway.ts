import {
  WebSocketGateway,
  WebSocketServer,
  SubscribeMessage,
  MessageBody,
  ConnectedSocket,
  OnGatewayConnection,
  OnGatewayDisconnect,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { NotificationsService } from './notifications.service';
import { CreateNotificationDto } from './dto/CreateNotificationDto.dto';
import { NotificationType } from './notifications.schema';

@WebSocketGateway({
  cors: {
    origin: '*', // Cho ph√©p FE k·∫øt n·ªëi, c√≥ th·ªÉ gi·ªõi h·∫°n domain
  },
  namespace: '/notifications', // Namespace ri√™ng cho notification
})
export class NotificationsGateway implements OnGatewayConnection, OnGatewayDisconnect {
  @WebSocketServer()
  server: Server;

  // Map ƒë·ªÉ l∆∞u tr·ªØ recruiter online v√† room c·ªßa h·ªç
  private onlineRecruiters = new Map<string, string>(); // recruiterId -> socketId
  private socketToRecruiter = new Map<string, string>(); // socketId -> recruiterId

  // Map cho client (·ª©ng vi√™n) online v√† room c·ªßa h·ªç
  private onlineClients = new Map<string, string>(); // clientId -> socketId
  private socketToClient = new Map<string, string>(); // socketId -> clientId

  constructor(private readonly notificationsService: NotificationsService) {}

  // Khi client k·∫øt n·ªëi
  handleConnection(client: Socket) {
    console.log(`Client connected: ${client.id}`);
  }

  // Khi client ng·∫Øt k·∫øt n·ªëi
  handleDisconnect(client: Socket) {
    console.log(`Client disconnected: ${client.id}`);
    
    // X√≥a recruiter kh·ªèi danh s√°ch online n·∫øu c√≥
    const recruiterId = this.socketToRecruiter.get(client.id);
    if (recruiterId) {
      this.onlineRecruiters.delete(recruiterId);
      this.socketToRecruiter.delete(client.id);
      console.log(`Recruiter ${recruiterId} went offline`);
    }

    // X√≥a client kh·ªèi danh s√°ch online n·∫øu c√≥
    const clientUserId = this.socketToClient.get(client.id);
    if (clientUserId) {
      this.onlineClients.delete(clientUserId);
      this.socketToClient.delete(client.id);
      console.log(`Client user ${clientUserId} went offline`);
    }
  }

  // Recruiter join v√†o room (online)
  @SubscribeMessage('recruiterJoin')
  handleRecruiterJoin(
    @MessageBody() data: { recruiterId: string },
    @ConnectedSocket() client: Socket,
  ) {
    const { recruiterId } = data;
    
    // L∆∞u th√¥ng tin recruiter online
    this.onlineRecruiters.set(recruiterId, client.id);
    this.socketToRecruiter.set(client.id, recruiterId);
    
    // Join v√†o room c·ªßa recruiter
    client.join(recruiterId);
    
    console.log(`Recruiter ${recruiterId} joined room and is now online`);
    
    // G·ª≠i s·ªë notification ch∆∞a ƒë·ªçc khi recruiter online
    this.sendUnreadCountToRecruiter(recruiterId);
    
    return { event: 'recruiterJoined', recruiterId, online: true };
  }

  // Client join v√†o room theo userId (cho user th∆∞·ªùng)
  @SubscribeMessage('joinRoom')
  handleJoinRoom(
    @MessageBody() userId: string,
    @ConnectedSocket() client: Socket,
  ) {
    client.join(userId);
    console.log(`Client ${client.id} joined room ${userId}`);
    return { event: 'joinedRoom', room: userId };
  }

  // Client (·ª©ng vi√™n) join room ri√™ng
  @SubscribeMessage('clientJoin')
  handleClientJoin(
    @MessageBody() data: { clientId: string },
    @ConnectedSocket() client: Socket,
  ) {
    const { clientId } = data;

    // L∆∞u th√¥ng tin client online
    this.onlineClients.set(clientId, client.id);
    this.socketToClient.set(client.id, clientId);

    // Join v√†o room c·ªßa client
    client.join(clientId);

    console.log(`Client user ${clientId} joined room and is now online`);
    return { event: 'clientJoined', clientId, online: true };
  }

  // ·ª®ng vi√™n c·∫≠p nh·∫≠t tr·∫°ng th√°i h·ªì s∆° -> emit cho recruiter
  @SubscribeMessage('clientApplicationStatusChanged')
  async handleClientApplicationStatusChanged(
    @MessageBody() data: {
      recruiterId: string; // recruiter nh·∫≠n th√¥ng b√°o
      applicationId: string;
      jobId: string;
      applicantId: string;
      applicantName?: string;
      jobTitle?: string;
      status:
        | 'APPLICATION_VIEWED'
        | 'APPLICATION_PASSED'
        | 'APPLICATION_REJECTED'
        | 'INTERVIEW_INVITED'
        | 'INTERVIEW_RESULT'
        | 'OFFER_SENT'
        | 'OFFER_RESPONSE'
        | 'HIRED';
      message?: string;
      metadata?: any;
    },
  ) {
    const {
      recruiterId,
      applicationId,
      jobId,
      applicantId,
      applicantName,
      jobTitle,
      status,
      message,
      metadata,
    } = data;

    // Map status string sang enum NotificationType
    const statusToType: Record<string, NotificationType> = {
      APPLICATION_VIEWED: NotificationType.APPLICATION_VIEWED,
      APPLICATION_PASSED: NotificationType.APPLICATION_PASSED,
      APPLICATION_REJECTED: NotificationType.APPLICATION_REJECTED,
      INTERVIEW_INVITED: NotificationType.INTERVIEW_INVITED,
      INTERVIEW_RESULT: NotificationType.INTERVIEW_RESULT,
      OFFER_SENT: NotificationType.OFFER_SENT,
      OFFER_RESPONSE: NotificationType.OFFER_RESPONSE,
      HIRED: NotificationType.HIRED,
    };

    const type = statusToType[status] ?? NotificationType.OTHER;

    const notificationData = {
      userId: recruiterId,
      message:
        message ||
        `·ª®ng vi√™n ${applicantName || 'N/A'} c·∫≠p nh·∫≠t tr·∫°ng th√°i: ${status.replaceAll('_', ' ')}`,
      type,
      applicationId,
      jobId,
      applicantId,
      metadata: {
        ...(metadata || {}),
        jobTitle,
        applicantName,
        status,
      },
    } as any;

    // L∆∞u v√†o DB
    const saved = await this.notificationsService.create(notificationData);

    // Emit realtime t·ªõi recruiter room
    this.server.to(recruiterId).emit('newNotification', saved);

    return saved;
  }

  // Khi c√≥ th√¥ng b√°o m·ªõi
  @SubscribeMessage('createNotification')
  async handleCreateNotification(
    @MessageBody() createDto: CreateNotificationDto,
  ) {
    const notification = await this.notificationsService.create(createDto);
    this.server
      .to(createDto.userId.toString())
      .emit('newNotification', notification);
    return notification;
  }

  // Ki·ªÉm tra recruiter c√≥ online kh√¥ng
  isRecruiterOnline(recruiterId: string): boolean {
    return this.onlineRecruiters.has(recruiterId);
  }

  // Ki·ªÉm tra client c√≥ online kh√¥ng
  isClientOnline(clientId: string): boolean {
    return this.onlineClients.has(clientId);
  }

  // G·ª≠i s·ªë notification ch∆∞a ƒë·ªçc cho recruiter
  async sendUnreadCountToRecruiter(recruiterId: string) {
    try {
      const unreadCount = await this.notificationsService.countUnreadByUser(recruiterId);
      this.server.to(recruiterId).emit('unreadCount', { unreadCount });
      console.log(`üìä Sent unread count ${unreadCount} to recruiter ${recruiterId}`);
    } catch (error) {
      console.error(`‚ùå Error sending unread count to recruiter ${recruiterId}:`, error);
    }
  }

  // G·ª≠i notification cho recruiter khi c√≥ application m·ªõi
  async sendApplicationNotification(
    recruiterId: string,
    applicationId: string,
    jobId: string,
    applicantId: string,
    jobTitle: string,
    applicantName: string
  ) {
    try {
      console.log(`üì§ Sending application notification to recruiter ${recruiterId}`);
      
      const notificationData: CreateNotificationDto = {
        userId: recruiterId,
        message: `C√≥ ƒë∆°n ·ª©ng tuy·ªÉn m·ªõi cho v·ªã tr√≠ "${jobTitle}" t·ª´ ${applicantName}`,
        type: NotificationType.NEW_APPLICATION,
        applicationId,
        jobId,
        applicantId,
        metadata: {
          jobTitle,
          applicantName,
          applicationId
        },
        audience: 'recruiter'
      };

      // L∆∞u notification v√†o database
      const savedNotification = await this.notificationsService.create(notificationData);
      console.log(`‚úÖ Application notification saved to database:`, savedNotification);

      // Ki·ªÉm tra recruiter c√≥ online kh√¥ng
      if (this.isRecruiterOnline(recruiterId)) {
        // Th1: Recruiter online - g·ª≠i realtime notification
        this.server.to(recruiterId).emit('newNotification', savedNotification);
        console.log(`üì° Realtime notification sent to online recruiter ${recruiterId}`);
      } else {
        // Th2: Recruiter offline - ch·ªâ l∆∞u v√†o DB, s·∫Ω hi·ªÉn th·ªã khi ƒëƒÉng nh·∫≠p
        console.log(`üìù Notification saved for offline recruiter ${recruiterId}`);
      }

      return savedNotification;
    } catch (error) {
      console.error(`‚ùå Error sending application notification:`, error);
      throw error;
    }
  }

  // Emit th·ªß c√¥ng t·ª´ BE (gi·ªØ nguy√™n cho backward compatibility)
  async sendNotificationToUser(userId: string, notification: any) {
    try {
      console.log(`üì§ Creating notification for user ${userId}:`, notification);
      
      // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p userId l√† 'unknown'
      let actualUserId = userId;
      if (userId === 'unknown') {
        // T·∫°o m·ªôt ObjectId t·∫°m th·ªùi ho·∫∑c s·ª≠ d·ª•ng m·ªôt ID m·∫∑c ƒë·ªãnh
        actualUserId = '000000000000000000000000'; // ObjectId m·∫∑c ƒë·ªãnh
        console.log('‚ö†Ô∏è Using fallback userId for unknown recruiter');
      }
      
      // L∆∞u notification v√†o database tr∆∞·ªõc
      const savedNotification = await this.notificationsService.create({
        userId: actualUserId,
        message: notification.message,
        type: notification.type || 'other'
      });
      
      console.log(`‚úÖ Notification saved to database:`, savedNotification);
      
      // Sau ƒë√≥ emit qua Socket.IO (ch·ªâ n·∫øu userId kh√¥ng ph·∫£i unknown)
      if (userId !== 'unknown') {
        this.server.to(userId).emit('newNotification', savedNotification);
        console.log(`üì° Notification emitted to room ${userId}`);
      } else {
        console.log(`‚ö†Ô∏è Skipping Socket.IO emit for unknown user`);
      }
      
      return savedNotification;
    } catch (error) {
      console.error(`‚ùå Error in sendNotificationToUser:`, error);
      throw error;
    }
  }

  // G·ª≠i th√¥ng b√°o cho ·ª©ng vi√™n khi NTD ƒë√£ xem h·ªì s∆°
  async sendApplicationViewedToClient(
    clientUserId: string,
    applicationId: string,
    jobId: string,
    jobTitle: string
  ) {
    try {
      const notificationData: CreateNotificationDto = {
        userId: clientUserId,
        message: `Nh√† tuy·ªÉn d·ª•ng ƒë√£ xem h·ªì s∆° c·ªßa b·∫°n cho v·ªã tr√≠ "${jobTitle}"`,
        type: NotificationType.APPLICATION_VIEWED,
        applicationId,
        jobId,
        metadata: {
          jobTitle,
          applicationId
        },
        audience: 'client'
      };

      const savedNotification = await this.notificationsService.create(notificationData);

      if (this.isClientOnline(clientUserId)) {
        this.server.to(clientUserId).emit('newNotification', savedNotification);
        console.log(`üì° Realtime notification sent to online client ${clientUserId}`);
      } else {
        console.log(`üìù Notification saved for offline client ${clientUserId}`);
      }

      return savedNotification;
    } catch (error) {
      console.error(`‚ùå Error sending application viewed notification to client:`, error);
      throw error;
    }
  }

  // G·ª≠i th√¥ng b√°o cho ·ª©ng vi√™n khi NTD m·ªùi ph·ªèng v·∫•n
  async sendInterviewInvitedToClient(
    clientUserId: string,
    applicationId: string,
    jobId: string,
    jobTitle: string,
    whenText: string,
    whereText: string,
  ) {
    try {
      const notificationData: CreateNotificationDto = {
        userId: clientUserId,
        message: `B·∫°n ƒë∆∞·ª£c m·ªùi ph·ªèng v·∫•n cho v·ªã tr√≠ "${jobTitle}" v√†o l√∫c ${whenText} t·∫°i ${whereText}`,
        type: NotificationType.INTERVIEW_INVITED,
        applicationId,
        jobId,
        metadata: {
          jobTitle,
          applicationId,
          interviewDate: whenText,
          interviewLocation: whereText,
        },
        audience: 'client'
      };

      const savedNotification = await this.notificationsService.create(notificationData);

      if (this.isClientOnline(clientUserId)) {
        this.server.to(clientUserId).emit('newNotification', savedNotification);
        console.log(`üì° Realtime INTERVIEW_INVITED sent to online client ${clientUserId}`);
      } else {
        console.log(`üìù INTERVIEW_INVITED saved for offline client ${clientUserId}`);
      }

      return savedNotification;
    } catch (error) {
      console.error(`‚ùå Error sending interview invited notification to client:`, error);
      throw error;
    }
  }

  // G·ª≠i th√¥ng b√°o shortlist cho ·ª©ng vi√™n
  async sendApplicationShortlistedToClient(
    clientUserId: string,
    applicationId: string,
    jobId: string,
    jobTitle: string,
  ) {
    try {
      const notificationData: CreateNotificationDto = {
        userId: clientUserId,
        message: `H·ªì s∆° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë∆∞a v√†o shortlist cho v·ªã tr√≠ "${jobTitle}"`,
        type: NotificationType.APPLICATION_PASSED,
        applicationId,
        jobId,
        metadata: { jobTitle, applicationId },
        audience: 'client'
      };

      const savedNotification = await this.notificationsService.create(notificationData);

      if (this.isClientOnline(clientUserId)) {
        this.server.to(clientUserId).emit('newNotification', savedNotification);
        console.log(`üì° Realtime APPLICATION_PASSED sent to online client ${clientUserId}`);
      }
      return savedNotification;
    } catch (error) {
      console.error('‚ùå Error sending shortlist notification:', error);
      throw error;
    }
  }

  // G·ª≠i th√¥ng b√°o t·ª´ ch·ªëi cho ·ª©ng vi√™n
  async sendApplicationRejectedToClient(
    clientUserId: string,
    applicationId: string,
    jobId: string,
    jobTitle: string,
  ) {
    try {
      const notificationData: CreateNotificationDto = {
        userId: clientUserId,
        message: `R·∫•t ti·∫øc, h·ªì s∆° c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi cho v·ªã tr√≠ "${jobTitle}"`,
        type: NotificationType.APPLICATION_REJECTED,
        applicationId,
        jobId,
        metadata: { jobTitle, applicationId },
        audience: 'client'
      };

      const savedNotification = await this.notificationsService.create(notificationData);
      if (this.isClientOnline(clientUserId)) {
        this.server.to(clientUserId).emit('newNotification', savedNotification);
        console.log(`üì° Realtime APPLICATION_REJECTED sent to online client ${clientUserId}`);
      }
      return savedNotification;
    } catch (error) {
      console.error('‚ùå Error sending rejection notification:', error);
      throw error;
    }
  }
}
